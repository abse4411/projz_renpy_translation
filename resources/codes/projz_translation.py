# projz_renpy_translation, a translator for RenPy games
# Copyright (C) 2023  github.com/abse4411
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

###########################################################
# ________  ________  ________        ___  ________       #
# |\   __  \|\   __  \|\   __  \      |\  \|\_____  \     #
# \ \  \|\  \ \  \|\  \ \  \|\  \     \ \  \\|___/  /|    #
#  \ \   ____\ \   _  _\ \  \\\  \  __ \ \  \   /  / /    #
#   \ \  \___|\ \  \\  \\ \  \\\  \|\  \\_\  \ /  /_/__   #
#    \ \__\    \ \__\\ _\\ \_______\ \________\\________\ #
#     \|__|     \|__|\|__|\|_______|\|________|\|_______| #
#                                                         #
#  This py file is generated by the project:              #
#  https://github.com/abse4411/projz_renpy_translation)   #
###########################################################

import json
import os.path
import time
try:
    from renpy.compat import basestring
except Exception as e:
    print(e)

_requests_ref = None
try:
    import requests
    _requests_ref = requests
except Exception as e:
    print(e)

import renpy
import sys

_PY3_OR_LATER = sys.version_info >= (3, 0)
if not _PY3_OR_LATER:
    from io import open

_PORT = '{projz_port}'
_URL = 'http://{projz_host}:' + _PORT
_STRING_REQ_TIMEOUT = {projz_string_request_time_out}
_DIALOGUE_REQ_TIMEOUT = {projz_dialogue_request_time_out}
_REQ_RETRY_TIME = {projz_retry_time}
_rest_time = time.time() - _REQ_RETRY_TIME
_stored_translations = dict()

try:
    if os.path.isfile('projz_translations.json'):
        with open('projz_translations.json', 'r', encoding='utf-8') as f:
            json_data = json.load(f)
            _stored_translations['String'] = json_data.get('String', {})
            _stored_translations['Say'] = json_data.get('Say', {})
            print('Translations updated: {0} dialogue translations, {1} string translations.'.format(
                len(_stored_translations['String']), len(_stored_translations['Say'])))
except Exception as e:
    print(e)
    pass

if _requests_ref is None:

    if _PY3_OR_LATER:
        import urllib
        from urllib.request import Request, urlopen
        _requests_ref = urllib.request
    else:
        import urllib2
        from urllib2 import Request, urlopen
        _requests_ref = urllib2

    def quick_post(path, payload, timeout=1.0):
        global _URL, _rest_time, _REQ_RETRY_TIME
        if _rest_time < time.time():
            try:
                req = Request(_URL + path, headers={'Content-Type': 'application/json'},
                                            data=json.dumps(payload, ensure_ascii=False).encode('utf-8'))
                resp = urlopen(req, timeout=timeout)
                resp_data = resp.read()
                resp_json = json.loads(resp_data.decode('utf-8'))
                if _PY3_OR_LATER:
                    code = resp.status
                else:
                    code = resp.getcode()
                if code != 200:
                    return None
                return resp_json
            except Exception as e:
                _rest_time = time.time() + _REQ_RETRY_TIME
        return None
else:
    def quick_post(path, payload, timeout=1.0):
        global _requests_ref
        global _URL, _rest_time, _REQ_RETRY_TIME
        if _rest_time < time.time():
            try:
                res = _requests_ref.post(_URL + path, json=payload, timeout=timeout)
                # print('quick_post', res.json())
                if res.status_code != 200:
                    return None
                return res.json()
            except Exception as e:
                _rest_time = time.time() + _REQ_RETRY_TIME
        return None


def ok(res):
    if res:
        return res.get('code', None) == 0
    return False


def translation_post(identifier, language, type, text, substituted):
    global _STRING_REQ_TIMEOUT, _DIALOGUE_REQ_TIMEOUT
    try:
        # print(identifier)
        payload = {
            'identifier': identifier,
            'language': language,
            'type': type,
            'text': text,
            'substituted': substituted,
        }
        if type == 'String':
            timeout = _STRING_REQ_TIMEOUT
        else:
            timeout = _DIALOGUE_REQ_TIMEOUT
        res = quick_post('/translation', payload, timeout)
        if ok(res):
            return res['text']
        else:
            if _rest_time > time.time():
                new_text = _stored_translations.get(type, {}).get(identifier, {}).get('new_text', None)
                return new_text
    except Exception as e:
        pass
    return None


_string_set_build = False
_string_set = {}


def build_string_set():
    global _string_set_build, _string_set
    try:
        from renpy.parser import elide_filename
        if renpy.config.translate_launcher:
            max_priority = 499
        else:
            max_priority = 299
        strings = renpy.translation.scanstrings.scan(0, max_priority, False)
        for s in strings:
            # print(elide_filename(s.filename))
            short_name = elide_filename(s.filename)
            _string_set[s.text] = short_name
        # print('_string_set', len(_string_set))
        _string_set_build = True
    except Exception as e:
        print(e)


def _should_translate(string):
    global _string_set
    if string.strip() == '':
        return False
    filename = _string_set.get(string, None)
    if filename is not None:
        if filename.startswith('renpy'):
            return False
        if 'game/options.rpy' == filename or 'game/projz_i18n_inject.rpy' == filename:
            return False
        return True
    return True


def projz_prefix_suffix(self, thing, prefix, body, suffix):
    # if thing != 'what':
    #     return old_prefix_suffix(self, thing, prefix, body, suffix)
    res = old_prefix_suffix(self, thing, prefix, body, suffix)
    if body is None or body.strip() == '':
        return res
    new_text = None
    if thing == 'what':
        new_text = translation_post(renpy.game.context().translate_identifier, renpy.game.preferences.language, 'Say',
                                    body,
                                    res)
    elif thing == 'who':
        new_text = translation_post(body, renpy.game.preferences.language, 'String', body,
                                    res)
    if new_text is not None:
        return new_text
    return res


def projz_set_text(self, text, scope=None, substitute=False, update=True):
    global _string_set_build
    if not _string_set_build:
        build_string_set()
    res = old_set_text(self, text, scope, substitute, update)
    if not (substitute is True or substitute is None):
        return res
    if len(text) != 1 or (not isinstance(text[0], basestring)) or isinstance(text[0], bytes):
        return res
    old_text = text[0]
    striped_text = old_text.strip()
    if len(striped_text) <= 1 or (not _should_translate(old_text)) or (striped_text.startswith('[') and striped_text.endswith(']')):
        return res
    if substitute is None and '{#' in striped_text:
        return res
    s_text = self.text[0]
    new_text = translation_post(old_text, renpy.game.preferences.language, 'String', old_text, s_text)
    if new_text is not None:
        if new_text == s_text:
            return False
        self.text = [new_text]
        return True
    return res


def projz_do_display(self, who, what, **display_args):
    new_what = None
    if what is not None and what.strip() != '':
        new_what = translation_post(renpy.game.context().translate_identifier, renpy.game.preferences.language, 'Say',
                                    what,
                                    what)
    new_who = None
    if who is not None and who.strip() != '':
        new_who = translation_post(who, renpy.game.preferences.language, 'String', who, who)
    if new_who is not None:
        who = new_who
    if new_what is not None:
        what = new_what
    old_dtt = display_args.get('dtt', None)
    new_dtt = None
    if _DialogueTextTags_ref and isinstance(old_dtt, _DialogueTextTags_ref):
        new_dtt = _DialogueTextTags_ref(what)
        display_args['dtt'] = new_dtt
    old_do_display(self, who, what, **display_args)
    if old_dtt is not None:
        for k, v in vars(new_dtt).items():
            setattr(old_dtt, k, v)
        display_args['dtt'] = old_dtt


_DialogueTextTags_ref = None
try:
    _DialogueTextTags_ref = renpy.character.DialogueTextTags
except Exception as e:
    print(e)
try:
    old_prefix_suffix = renpy.character.ADVCharacter.prefix_suffix
    renpy.character.ADVCharacter.prefix_suffix = projz_prefix_suffix
except Exception as e:
    print(e)
    try:
        old_do_display = renpy.character.ADVCharacter.do_display
        renpy.character.ADVCharacter.do_display = projz_do_display
    except Exception as e:
        print(e)

try:
    old_set_text = renpy.text.text.Text.set_text
    renpy.text.text.Text.set_text = projz_set_text
except Exception as e:
    print(e)
